#20170708 split uris 注意mutate一定要分开，先新增字段uris，后进行拆分split
input {
    beats {
        port => "5000"
    }
}

filter {
    grok {
        match => { 'message' => '%{HTTPDATE:time_local} %{HOSTNAME:hostname} %{IPORHOST:remote_addr} %{NUMBER:remote_port:int} (%{USER:remote_user}|-) %{WORD:scheme} %{WORD:request_method} %{URIPATHPARAM:uri} %{URIPATHPARAM:request_uri} %{URIPATHPARAM:request_filename} (%{DATA:args}|-) (\[%{DATA:http_user_agent}\]|-) (%{DATA:http_referer}|-) (%{DATA:http_x_forwarded_for}|-) (%{NUMBER:content_length:int}|-) (%{DATA:content_type}|-) (%{NUMBER:body_bytes_sent:int}|-) (%{DATA:request_body}|-) (%{NUMBER:status:int}|-) %{IP:server_addr} (%{DATA:server_name}|-) (%{NUMBER:server_port:int}|-) (%{DATA:server_protocol}|-) (%{NUMBER:request_time:float}|-) (%{NUMBER:upstream_response_time:float}|-) (%{DATA:proxy_add_x_forwarded_for}|-) (%{GREEDYDATA:upstream_addr}|-)'}
    }
	
    mutate {
	  add_field => {
        "uris" => "%{uri}"
      }
	}
    mutate {
      split => { "uris" => "." }
      add_field => {
       "request_type" => "%{uris[1]}"
      }
    }
}
output {
    elasticsearch {
        hosts => "elasticsearch:9200"
    }
    stdout{codec => rubydebug}
}

#20170707 新增%{PATTERN_NAME:capture_name:data_type} data_type 目前只支持两个值：int 和 float。
input {
    beats {
        port => "5000"
    }
}

filter {
    grok {
        match => { 'message' => '%{HTTPDATE:time_local} %{HOSTNAME:hostname} %{IPORHOST:remote_addr} %{NUMBER:remote_port:int} (%{USER:remote_user}|-) %{WORD:scheme} %{WORD:request_method} %{URIPATHPARAM:uri} %{URIPATHPARAM:request_uri} %{URIPATHPARAM:request_filename} (%{DATA:args}|-) (\[%{DATA:http_user_agent}\]|-) (%{DATA:http_referer}|-) (%{DATA:http_x_forwarded_for}|-) (%{NUMBER:content_length:int}|-) (%{DATA:content_type}|-) (%{NUMBER:body_bytes_sent:int}|-) (%{DATA:request_body}|-) (%{NUMBER:status:int}|-) %{IP:server_addr} (%{DATA:server_name}|-) (%{NUMBER:server_port:int}|-) (%{DATA:server_protocol}|-) (%{NUMBER:request_time:float}|-) (%{NUMBER:upstream_response_time:float}|-) (%{DATA:proxy_add_x_forwarded_for}|-) (%{GREEDYDATA:upstream_addr}|-)'}
    }
}
output {
    elasticsearch {
        hosts => "elasticsearch:9200"
    }
    stdout{codec => rubydebug}
}


#20170707 完整版
input {
    beats {
        port => "5000"
    }
}

filter {
    grok {
        match => { 'message' => '%{HTTPDATE:time_local} %{HOSTNAME:hostname} %{IPORHOST:remote_addr} %{NUMBER:remote_port} (%{USER:remote_user}|-) %{WORD:scheme} %{WORD:request_method} %{URIPATHPARAM:uri} %{URIPATHPARAM:request_uri} %{URIPATHPARAM:request_filename} (%{DATA:args}|-) (\[%{DATA:http_user_agent}\]|-) (%{DATA:http_referer}|-) (%{DATA:http_x_forwarded_for}|-) (%{NUMBER:content_length}|-) (%{DATA:content_type}|-) (%{NUMBER:body_bytes_sent}|-) (%{DATA:request_body}|-) (%{NUMBER:status}|-) %{IP:server_addr} (%{DATA:server_name}|-) (%{NUMBER:server_port}|-) (%{DATA:server_protocol}|-) (%{NUMBER:request_time}|-) (%{NUMBER:upstream_response_time}|-) (%{DATA:proxy_add_x_forwarded_for}|-) (%{GREEDYDATA:upstream_addr}|-)'}
    }
}
output {
    elasticsearch {
        hosts => "elasticsearch:9200"
    }
    stdout{codec => rubydebug}
}


#20170707 file beats
input {
    beats {
        port => "5000"
    }
}

filter {
    grok {
        match => { 'message' => '%{IPORHOST:remoteAddr} (?:%{USER:ident}|-) (?:%{USER:remoteUser}|-) \[%{HTTPDATE:timeLocal}\] \"(?:%{WORD:verb} %{URIPATHPARAM:request}(?: HTTP/%{NUMBER:httpversion})?|)\" %{NUMBER:status} (?:%{NUMBER:bodyTytesSent}|-) (?:%{NUMBER:requestTime}|-) (?:%{NUMBER:upstreamResponseTime}|-) (?:%{URIPATHPARAM:upstreamAddr}|%{HOSTPORT:upstreamAddr}|-)' }
    }
}
output {
    elasticsearch {
        hosts => "elasticsearch:9200"
    }
    stdout{codec => rubydebug}
}

#20170705 file beats
input {
    beats {
        port => "5000"
    }
}

filter {
    grok {
        match => { 'message' => '%{IPORHOST:remote_addr} (?:%{USER:ident}|-) (?:%{USER:remote_user}|-) \[%{HTTPDATE:time_local}\] \"(?:%{WORD:verb} %{URIPATHPARAM:request}(?: HTTP/%{NUMBER:httpversion})?|)\" %{NUMBER:status} (?:%{NUMBER:body_bytes_sent}|-) (?:%{NUMBER:request_time}|-) (?:%{NUMBER:upstream_response_time}|-) (?:%{URIPATHPARAM:upstream_addr}|%{HOSTPORT:upstream_addr}|-)' }
    }
}
output {
    elasticsearch {
        hosts => "elasticsearch:9200"
    }
    stdout{codec => rubydebug}
}


'$remote_addr - $remote_user [$time_local] "$request" '
'$status $body_bytes_sent $request_time $upstream_response_time $upstream_addr  "$http_referer" '
'"$http_user_agent" "$http_x_forwarded_for"'
192.168.31.212 - admin [05/Jul/2017:14:52:40 +0800] "GET /api/v1/nodes?resourceVersion=3987195&timeoutSeconds=401&watch=true HTTP/2.0" 200 1354346 400.994 400.994 192.168.31.221:6443  "-" "prometheus/discovery" "-"

#20170705修改版本
input {
    tcp {
        host => "0.0.0.0"
        port => "5000"
    }
}

filter {
    grok {
        match => { 'message' => '%{IPORHOST:remote_addr} (?:%{USER:ident}|-) (?:%{USER:remote_user}|-) \[%{HTTPDATE:time_local}\] \"(?:%{WORD:verb} %{URIPATHPARAM:request}(?: HTTP/%{NUMBER:httpversion})?|)\" %{NUMBER:status} (?:%{NUMBER:body_bytes_sent}|-) (?:%{NUMBER:request_time}|-) (?:%{NUMBER:upstream_response_time}|-) (?:%{URIPATHPARAM:upstream_addr}|%{HOSTPORT:upstream_addr}|-)' }
    }
}
output {
    elasticsearch {
        hosts => "elasticsearch:9200"
    }
	stdout{codec => rubydebug}
}

#20170705简略版
input {
        tcp {
                port => 5000
        }
}

## Add your filters / logstash plugins configuration here

output {
        elasticsearch {
                hosts => "elasticsearch:9200"
        }
}


#20170705原版
input {
    beats {
        host => "0.0.0.0"
        port => "5000"
    }
}
filter {
    if [type] == "nginx-access" {
        grok {
            match => { 'message' => '%{IPORHOST:clientip} %{USER:ident} %{USER:agent} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{URIPATHPARAM:request}(?: HTTP/%{NUMBER:httpversion})?|)\" %{NUMBER:answer} (?:%{NUMBER:byte}|-) (?:\"(?:%{URI:referrer}|-))\" (?:%{QS:referree}) %{QS:agent}' }
         }
         geoip {
             source => "clientip"
             target => "geoip"
             database => "/etc/logstash/GeoLiteCity.dat"
             add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
             add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
        }
        mutate {
             convert => [ "[geoip][coordinates]", "float" ]
       }
   }
}
output {
    stdout {
        codec => rubydebug
    }
    elasticsearch {
        hosts => ["127.0.0.1:9200"]
        user => beats
        password => beatspassword
    }
}