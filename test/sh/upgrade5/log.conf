input {
    beats {
        port => "5044"
    }
}
filter {
    if [type] == "app_gc_log" {
	drop {}
    }
    if [type] == "nginx_log" {
	grok {
		patterns_dir => "/usr/local/logstash/patterns"
		match => {
			"message" => "%{NGINX_TIME_LOCAL:[@metadata][timestamp]} %{NGINX_HOSTNAME:hostname} %{NGINX_REMOTE_ADDR:remote_host} %{NGINX_REMOTE_PORT:remote_port} %{NGINX_REMOTE_USER:remote_user} %{NGINX_SCHEME:scheme} %{NGINX_REQUEST_METHOD:request_method} %{NGINX_URI:uri} %{NGINX_REQUEST_URI:request_uri} %{NGINX_REQUEST_FILENAME:request_filename} %{NGINX_ARGS:args} %{NGINX_HTTP_USER_AGENT:http_user_agent} %{NGINX_HTTP_REFERER:http_referer} %{NGINX_HTTP_X_FORWARDED_FOR:http_x_forwarded_for} %{NGINX_CONTENT_LENGTH:content_length:int} %{NGINX_CONTENT_TYPE:content_type} %{NGINX_BODY_BYTES_SENT:body_bytes_sent:int} %{NGINX_REQUEST_BODY:request_body} %{NGINX_STATUS:status:int} %{NGINX_SERVER_ADDR:server_addr} %{NGINX_SERVER_NAME:server_name} %{NGINX_SERVER_PORT:server_port} %{NGINX_SERVER_PROTOCOL:server_protocol} %{NGINX_SERVICE_ID:service_id} %{NGINX_VERSION_ID:version_id} %{NGINX_USER_ID:user_id} %{NGINX_REQUEST_TIME:request_time:float} %{NGINX_UPSTREAM_ADDR:upstream_addr} %{NGINX_UPSTREAM_RESPONSE_TIME:upstream_response_time:float} %{NGINX_PROXY_ADD_X_FORWARDED_FOR:proxy_add_x_forwarded_for} %{NGINX_ENV_TYPE:env_type} %{NGINX_ENV_ID:env_id} %{NGINX_BUS_TYPE:log_type}"
		}
	}
    } else {
	json {
   		source => "message"
      		add_field => { "[@metadata][timestamp]" => "%{timestamp}" }
	}
    	date {
        	match => [ "[@metadata][timestamp]", "yyyy-MM-dd'T'HH:mm:ss.SSSZ" ]
    	}
    }
    if [log_type] == "api" and [type] == "nginx_log" {
        alter {
                add_field => {
                       "d_key" => "%{version_id}-%{request_method}-%{uri}"
                }
        }
        translate {
		dictionary_path => "/usr/local/logstash/dic/api_dictionary.yaml"
		exact => true
		regex => true
		field => "d_key"
		destination => "apiinfo"
		refresh_interval => 60
		fallback => "false"
	}
	if [apiinfo] == "false" {
		drop {}
	}
	mutate {
                split => { "apiinfo" => "|" }
#		remove_field => [ "interface_id" ,"method_name" ]
		add_field => {
			"interface_id" => "%{apiinfo[0]}"
			"method_name"  => "%{apiinfo[1]}"
		}
		remove_field => [ "apiinfo" ]
        }
    }
    if [log_type] == "app" {
	alter {
		add_field => { "uris" => "%{uri}" }
	}
        mutate {
		split => { "uris" => "." }
		add_field => {"request_type" => "%{uris[1]}"}
	}
        alter {
		remove_field => [ "uris" ]
	}
    }
    if [log_type] == "api" or [log_type] == "app" or [log_type] == "store" or [log_type] == "source" {
        alter {
		remove_field => [ "type" ]
        }
	alter {
		add_field => { "type" => "%{log_type}_log" }
	}
    }
    alter {
	remove_field => [ "message","source","timestamp" ]
    }
}
output {
    stdout {
       codec => json
    }
    elasticsearch {
        #hosts => ["192.168.10.84:9201"]
        hosts => ["192.168.10.84:9201","192.168.10.84:9202","192.168.10.84:9203"]
	template => "/usr/local/logstash/template/logstash.tmpl"
	template_name => "logstash"
	template_overwrite => true
    }
}
